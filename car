/*
#include <windows.h>
#include <GL/glut.h>
#include <stdlib.h>
#include <iostream>
using namespace std;

GLfloat ex = 0.0, ey = 0.0, ez = -3.0;

void init()
{
    glEnable(GL_DEPTH_TEST);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustum(-4.0, 4.0, -4.0, 4.0, 1.0, 10.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(ex, ey, ez, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
}

void drawCar()
{
    // Draw body
    glColor3f(0.5, 0.5, 0.5);
    glPushMatrix();
    glTranslatef(0.0, 0.5, 0.0);
    glScalef(2.0, 0.5, 1.0);
    glutSolidCube(1.0);
    glPopMatrix();

    // Draw wheels
    glColor3f(0.1, 0.1, 0.1);
    glPushMatrix();
    glTranslatef(-0.8, -0.4, 0.5);
    glutSolidTorus(0.1, 0.2, 10, 10);
    glTranslatef(1.6, 0.0, 0.0);
    glutSolidTorus(0.1, 0.2, 10, 10);
    glPopMatrix();

    // Draw windows
    glColor3f(0.8, 0.8, 1.0);
    glPushMatrix();
    glTranslatef(0.0, 0.7, 0.3);
    glScalef(1.8, 0.3, 0.5);
    glutSolidCube(1.0);
    glPopMatrix();

    // Draw front light
    glColor3f(1.0, 1.0, 0.0);
    glPushMatrix();
    glTranslatef(-0.8, 0.2, 0.5);
    glutSolidSphere(0.1, 20, 20);
    glPopMatrix();

    // Draw back light
    glColor3f(1.0, 0.0, 0.0);
    glPushMatrix();
    glTranslatef(0.8, 0.2, 0.5);
    glutSolidSphere(0.1, 20, 20);
    glPopMatrix();
}

void display(void)
{
    glClearColor(0.0f, 0.0f, 0.0, 0.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    drawCar();
    glutSwapBuffers();
}

void resize(int width, int height)
{
    double aspect;
    glViewport(0, 0, width, height);
    aspect = (double)width / (double)height;
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    cout << "aspect ratio" << aspect;
    if (aspect < 1.0)
    {
        glOrtho(-4., 4., -4. / aspect, 4. / aspect, 1., 100.);
    }
    else
    {
        glOrtho(-4. * aspect, 4. * aspect, -4., 4., 1., 100.);
    }
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0., 0., 5., 0., 0., 0., 0., 1., 0.);
}

static void key(unsigned char key, int x, int y)
{
    switch (key)
    {
    case 27:
    case 'q':
        exit(0);
        break;

    case '+':
        cout << "+" << "Pressed ";
        ez += 1.0;
        break;

    case '-':
        cout << "+" << "Pressed ";
        ez -= 1.0;
        break;
    }
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(ex, ey, ez, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    glutPostRedisplay();
}

static void arrowKey(int key, int x, int y)
{
    cout << key << "pressed\n";
    switch (key)
    {
    case GLUT_KEY_LEFT:
        cout << "GLUT_KEY_LEFT" << "Pressed ";
        ex -= 1.0;
        break;

    case GLUT_KEY_RIGHT:
        cout << "GLUT_KEY_RIGHT" << "Pressed ";
        ex += 1.0;
        break;

    case GLUT_KEY_UP:
        cout << "GLUT_KEY_UP" << "Pressed ";
        ey -= 1.0;
        break;

    case GLUT_KEY_DOWN:
        cout << "GLUT_KEY_DOWN" << "Pressed ";
        ey += 1.0;
        break;
    }
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(ex, ey, ez, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    glutPostRedisplay();
}

int main(int argc, char* argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(10, 10);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);

    glutCreateWindow("Simple Car");

    glutReshapeFunc(resize);
    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutSpecialFunc(arrowKey);

    init();

    glutMainLoop();

    return EXIT_SUCCESS;
}
*/
